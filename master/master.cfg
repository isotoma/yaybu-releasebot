# -*- python -*-
# ex: set syntax=python:

from buildbot.buildslave import BuildSlave
from buildbot.config import BuilderConfig
from buildbot.changes.gitpoller import GitPoller
from buildbot.schedulers.basic import AnyBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.forcesched import ChoiceStringParameter
from buildbot.changes import filter
from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand, SetProperty
from buildbot.status import html
from buildbot.status.web import authz, auth
from buildbot.process.properties import Interpolate, Property
from buildbot.schedulers.timed import Nightly
from buildbot.schedulers.filter import ChangeFilter


COMPONENTS = {
    'yay': {
        'repository': 'git://github.com/yaybu/yay',
        'branch': 'master',
        'workdir': 'build/src/yay',
        },
    'yaybu': {
        'repository': 'git://github.com/yaybu/yaybu',
        'branch': 'master',
        'workdir': 'build/src/yaybu',
        },
    'Yaybu.app': {
        'repository': 'git://github.com/yaybu/Yaybu.app',
        'branch': 'master',
        'workdir': 'build',
        },
    'Yaybu.exe': {
        'repository': 'git://github.com/yaybu/Yaybu.exe',
        'branch': 'master',
        'workdir': 'build',
        },
    'Yaybu.deb': {
        'repository': 'git://github.com/yaybu/Yaybu.deb',
        'branch': 'master',
        'workdir': 'build',
        },

    }

OSX_COMPONENTS = ['Yaybu.app', 'yay', 'yaybu']
DEB_COMPONENTS = ['Yaybu.deb', 'yay', 'yaybu']
WIN7_COMPONENTS = ['Yaybu.exe', 'yay', 'yaybu']

c = BuildmasterConfig = {}

c['slaves'] = [
    BuildSlave("osx_slave", "pass"),
    BuildSlave("deb_slave", "pass"),
    BuildSlave("win7_slave", "pass"),
    BuildSlave("wine_slave", "pass"),
    ]
c['slavePortnum'] = 9989


def codebaseGenerator(chdict):
    return chdict['project']
c['codebaseGenerator'] = codebaseGenerator


c['change_source'] = []
for project, vcs in COMPONENTS.items():
    c['change_source'].append(GitPoller(
        vcs['repository'],
        project=project,
        branch=vcs['branch'],
        pollinterval=300
        ))


c['schedulers'] = []
c['schedulers'].append(AnyBranchScheduler(
    name="on-commit-yay",
    codebases=COMPONENTS,
    treeStableTimer=None,
    change_filter=ChangeFilter(project="yay"),
    builderNames=["test_yay_osx", "test_yay_win7"],
    ))
c['schedulers'].append(AnyBranchScheduler(
    name="on-commit-yaybu",
    codebases=COMPONENTS,
    treeStableTimer=None,
    change_filter=ChangeFilter(project=["yay", "yaybu"]),
    builderNames=["test_yaybu_osx", "test_yaybu_win7"],
    ))
c['schedulers'].append(Nightly(
    name='nightly-osx',
    builderNames=['build_osx'],
    codebases=COMPONENTS,
    branch='master',
    change_filter=ChangeFilter(project=OSX_COMPONENTS),
    hour=3,
    minute=0,
    onlyIfChanged=True,
    properties = {
        "channel": "nightlies",
        },
    ))
c['schedulers'].append(Nightly(
    name='nightly-wine',
    builderNames=['build_wine'],
    codebases=COMPONENTS,
    branch='master',
    change_filter=ChangeFilter(project=WIN7_COMPONENTS),
    hour=3,
    minute=0,
    onlyIfChanged=True,
    properties = {
        "channel": "nightlies",
        },
    ))
c['schedulers'].append(Nightly(
    name='nightly-deb',
    builderNames=['build_deb'],
    codebases=COMPONENTS,
    branch='master',
    change_filter=ChangeFilter(project=DEB_COMPONENTS),
    hour=3,
    minute=0,
    onlyIfChanged=True,
    properties = {
        "channel": "nightlies",
        },
    ))
c['schedulers'].append(ForceScheduler(
    name="force-release",
    codebases=COMPONENTS,
    builderNames=["build_osx", "build_deb", "build_wine"],
    properties = [
        ChoiceStringParameter(name="channel", choices=["nightlies", "stable"], default="main"),
        ],
    ))
c['schedulers'].append(ForceScheduler(
    name="force",
    codebases=COMPONENTS,
    builderNames=["test_yay_osx", "test_yay_win7", "test_yaybu_osx", "test_yaybu_win7"],
    ))


c['builders'] = []

# Test yay on OSX
# ===============

factory = BuildFactory()
factory.addStep(Git(
    repourl = COMPONENTS['yay']['repository'],
    mode = 'incremental',
    codebase = 'yay',
    ))
factory.addStep(ShellCommand(
    command=['travis-solo', '--overwrite', '{"python": ["2.7"]}'],
    ))


c['builders'].append(
    BuilderConfig(
        name="test_yay_osx",
        slavenames=['osx_slave'],
        factory = factory,
        )
    )


# Test yaybu on OSX
# ===============

factory = BuildFactory()
factory.addStep(Git(
    repourl = COMPONENTS['yaybu']['repository'],
    mode = 'incremental',
    codebase = 'yaybu',
    ))
factory.addStep(Git(
    repourl = COMPONENTS['yay']['repository'],
    mode = 'incremental',
    codebase = 'yay',
    workdir = 'build/src/yay',
    ))
factory.addStep(ShellCommand(
    command=['travis-solo', '--overwrite', '{"python": ["2.7"]}'],
    ))


c['builders'].append(
    BuilderConfig(
        name="test_yaybu_osx",
        slavenames=['osx_slave'],
        factory = factory,
        )
    )


# Test yay on win 7
# =================

env = {'PATH': 'C:\\Git\\bin;C:\\Python27;C:\\Python27\\Scripts;C:\\MinGW\\bin;${PATH}'}
factory = BuildFactory()
factory.addStep(Git(
    repourl = COMPONENTS['yay']['repository'],
    mode = 'incremental',
    codebase = 'yay',
    env=env,
    ))
factory.addStep(ShellCommand(
    description = "setting up yay",
    descriptionDone = "set up yay",
    haltOnFailure = True,
    command = ['python', '-m', 'pip', 'install', '-e', '.'],
    env=env,
    ))
factory.addStep(ShellCommand(
    description = "setting up env",
    descriptionDone = "set up env",
    haltOnFailure = True,
    command = ['python', '-m', 'pip', 'install', 'fakechroot', 'unittest2', 'PyYAML', 'nose2', 'mock'],
    env=env,
    ))
factory.addStep(ShellCommand(
    description = "running tests",
    descriptionDone = "ran tests",
    haltOnFailure = True,
    command = ['nose2'],
    env=env,
    ))

c['builders'].append(
    BuilderConfig(
        name="test_yay_win7",
        slavenames=['win7_slave'],
        factory = factory,
        )
    )


# Test yaybu on win 7
# ===================

env = {'PATH': 'C:\\Git\\bin;C:\\Python27;C:\\Python27\\Scripts;C:\\MinGW\\bin;${PATH}'}
factory = BuildFactory()
factory.addStep(Git(
    repourl = COMPONENTS['yaybu']['repository'],
    mode = 'incremental',
    codebase = 'yaybu',
    env=env,
    ))
factory.addStep(Git(
    repourl = COMPONENTS['yay']['repository'],
    mode = 'incremental',
    codebase = 'yay',
    env=env,
    workdir="build/src/yay",
    ))
factory.addStep(ShellCommand(
    description = "setting up yay",
    descriptionDone = "set up yay",
    haltOnFailure = True,
    command = ['python', '-m', 'pip', 'install', '-e', 'src/yay'],
    env=env,
    ))
factory.addStep(ShellCommand(
    description = "setting up yaybu",
    descriptionDone = "set up yaybu",
    haltOnFailure = True,
    command = ['python', '-m', 'pip', 'install', '-e', '.'],
    env=env,
    ))
factory.addStep(ShellCommand(
    description = "setting up env",
    descriptionDone = "set up env",
    haltOnFailure = True,
    command = ['python', '-m', 'pip', 'install', 'PyYAML', 'nose2', 'mock'],
    env=env,
    ))
factory.addStep(ShellCommand(
    description = "running tests",
    descriptionDone = "ran tests",
    haltOnFailure = True,
    command = ['nose2'],
    env=env,
    ))

c['builders'].append(
    BuilderConfig(
        name="test_yaybu_win7",
        slavenames=['win7_slave'],
        factory = factory,
        )
    )



# Build and release Yaybu.app
# ===========================

factory = BuildFactory()
for comp in OSX_COMPONENTS:
    factory.addStep(Git(
        repourl = COMPONENTS[comp]['repository'],
        mode = 'incremental',
        codebase = comp,
        workdir = COMPONENTS[comp]['workdir'],
        ))
factory.addStep(ShellCommand(
    description = "setting up build environment",
    descriptionDone = "set up build environment",
    haltOnFailure = True,
    command = ['./build.sh'],
    ))
factory.addStep(ShellCommand(
    description = "building Yaybu.app",
    descriptionDone = "built Yaybu.app",
    haltOnFailure = True,
    command = ['python/bin/python', 'setup.py', 'py2app', '-b', Property('buildnumber'), '-c', Property('channel')],
    ))
factory.addStep(ShellCommand(
    description = "uploading to nightlies",
    descriptionDone = "uploaded nightlies",
    haltOnFailure = True,
    command = ['python/bin/python', 'nightlies/upload_nightly.py', Property('buildnumber'), Property('channel')],
    ))

c['builders'].append(
    BuilderConfig(
        name="build_osx",
        slavenames=['osx_slave'],
        factory = factory,
        )
    )



# Build and release Yaybu.deb
# ===========================

factory = BuildFactory()
for comp in DEB_COMPONENTS:
    factory.addStep(Git(
        repourl = COMPONENTS[comp]['repository'],
        mode = 'incremental',
        codebase = comp,
        workdir = COMPONENTS[comp]['workdir'],
        ))
factory.addStep(SetProperty(
    command="python setup.py --version",
    property="version",
    workdir = COMPONENTS["yaybu"]["workdir"],
    ))
factory.addStep(ShellCommand(
    description = "building packages",
    descriptionDone = "built packages",
    haltOnFailure = True,
    command = ['./build', Interpolate('%(prop:version)s+%(prop:buildnumber)s'), Property('channel')],
    ))

c['builders'].append(
    BuilderConfig(
        name="build_deb",
        slavenames=['deb_slave'],
        factory = factory,
        )
    )


# Build and release Yaybu.exe
# ===========================

env = {'PATH': 'C:\\Git\\bin;C:\\Python27;C:\\Python27\\Scripts;C:\\MinGW\\bin;${PATH}'}
factory = BuildFactory()
for comp in WIN7_COMPONENTS:
    factory.addStep(Git(
        repourl = COMPONENTS[comp]['repository'],
        mode = 'incremental',
        codebase = comp,
        workdir = COMPONENTS[comp]['workdir'],
        env=env,
        ))
factory.addStep(ShellCommand(
    description = "setting up yay",
    descriptionDone = "set up yay",
    haltOnFailure = True,
    command = ['wine', 'python', '-m', 'pip', 'install', '--no-deps', '--upgrade', '.'],
    workdir = COMPONENTS['yay']['workdir'],
    env=env,
    ))
factory.addStep(ShellCommand(
    description = "setting up yaybu",
    descriptionDone = "set up yaybu",
    haltOnFailure = True,
    command = ['wine', 'python', '-m', 'pip', 'install', '--no-deps', '--upgrade', '.'],
    workdir = COMPONENTS['yaybu']['workdir'],
    env=env,
    ))
factory.addStep(ShellCommand(
    description = "building Yaybu.exe",
    descriptionDone = "built Yaybu.exe",
    haltOnFailure = True,
    command = ['wine', 'python', 'setup.py', 'py2exe'],
    env=env,
    ))


c['builders'].append(
    BuilderConfig(
        name="build_wine",
        slavenames=['wine_slave'],
        factory = factory,
        )
    )


c['status'] = []

c['status'].append(html.WebStatus(
    http_port=8080,
    authz=authz.Authz(
        # auth=auth.BasicAuth([("yaybu","yaybu")]),
        gracefulShutdown = False,
        forceBuild = True,
        forceAllBuilds = True,
        pingBuilder = True,
        stopBuild = True,
        stopAllBuilds = True,
        cancelPendingBuild = True,
        ),
    ))

c['title'] = "Yaybu Release Automation"
c['titleURL'] = "https://github.com/yaybu/osx"
c['buildbotURL'] = "http://localhost:8080/"

c['db'] = {
    'db_url' : "sqlite:///state.sqlite",
}

