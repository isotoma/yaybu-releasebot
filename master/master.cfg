# -*- python -*-
# ex: set syntax=python:

import json
import os
import sys

from buildbot.buildslave import BuildSlave
from buildbot.config import BuilderConfig
from buildbot.changes import filter
from buildbot.changes.gitpoller import GitPoller
from buildbot.locks import MasterLock
from buildbot.process.factory import BuildFactory
from buildbot.process.properties import Interpolate, Property
from buildbot.schedulers.basic import AnyBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.forcesched import ChoiceStringParameter
from buildbot.schedulers.filter import ChangeFilter
from buildbot.schedulers.timed import Nightly
from buildbot.schedulers.triggerable import Triggerable
from buildbot.status import html
from buildbot.status.web import authz, auth
from buildbot.steps.shell import ShellCommand, SetPropertyFromCommand
from buildbot.steps.source.git import Git
from buildbot.steps.trigger import Trigger


settings = json.load(open(os.path.join(sys.prefix, "etc", "settings.json")))


COMPONENTS = {
    'yay': {
        'repository': 'git://github.com/yaybu/yay',
        'branch': 'master',
        'workdir': 'build/src/yay',
        },
    'yaybu': {
        'repository': 'git://github.com/yaybu/yaybu',
        'branch': 'master',
        'workdir': 'build/src/yaybu',
        },
    'Yaybu.app': {
        'repository': 'git://github.com/yaybu/Yaybu.app',
        'branch': 'master',
        'workdir': 'build',
        },
    'Yaybu.exe': {
        'repository': 'git://github.com/yaybu/Yaybu.exe',
        'branch': 'master',
        'workdir': 'build',
        },
    'Yaybu.deb': {
        'repository': 'git://github.com/yaybu/Yaybu.deb',
        'branch': 'master',
        'workdir': 'build',
        },

    }

TARGETS = {
    "windows": {
        "components": ['Yaybu.exe', 'yay', 'yaybu'],
        "builders": ['build_wine'],
    },
    "osx": {
        "components": ['Yaybu.app', 'yay', 'yaybu'],
        "builders": ['build_osx'],
    },
    "debian": {
        "components": ['Yaybu.deb', 'yay', 'yaybu'],
        "builders": [],
    }
}

for a in settings['debs']['archives']:
    for s in a['series']:
        for p in s['archs']:
            TARGETS['debian']['builders'].append(str("%s_%s_%s" % (a['name'], s['name'], p)))


c = BuildmasterConfig = {}

c['slaves'] = [
    BuildSlave("osx_slave", "pass"),
    BuildSlave("debian", "pass"),
    BuildSlave("wine", "pass"),
    ]
c['slavePortnum'] = 9989


def codebaseGenerator(chdict):
    return chdict['project']
c['codebaseGenerator'] = codebaseGenerator


c['change_source'] = []
for project, vcs in COMPONENTS.items():
    c['change_source'].append(GitPoller(
        vcs['repository'],
        project=project,
        branch=vcs['branch'],
        pollinterval=300
    ))



c['schedulers'] = []

for target_name, target in TARGETS.items():
    c['schedulers'].append(AnyBranchScheduler(
        name="on-commit-%s" % target_name,
        builderNames=target['builders'],
        change_filter=ChangeFilter(project=target['components']),
        codebases=COMPONENTS,
        treeStableTimer=None,
        properties = {
            "channel": "zero",
        },
    ))

    c['schedulers'].append(Nightly(
        name='nightly-%s' % target_name,
        change_filter=ChangeFilter(project=target['components']),
        builderNames=target['builders'],
        codebases=COMPONENTS,
        branch='master',
        hour=3,
        minute=0,
        onlyIfChanged=True,
        properties = {
            "channel": "nightlies",
        },
    ))


builderNames = []
for target in TARGETS.values():
    builderNames.extend(target['builders'])

c['schedulers'].append(ForceScheduler(
    name="force-release",
    codebases=COMPONENTS,
    builderNames= builderNames,
    properties = [
        ChoiceStringParameter(name="channel", choices=["zero", "nightlies", "stable"], default="zero"),
    ],
    ))


c['builders'] = []

# Test yay on OSX
# ===============

factory = BuildFactory()
factory.addStep(Git(
    repourl = COMPONENTS['yay']['repository'],
    mode = 'incremental',
    codebase = 'yay',
))
factory.addStep(ShellCommand(
    name="travis-solo",
    command=['travis-solo', '--overwrite', '{"python": ["2.7"]}'],
))


#c['builders'].append(BuilderConfig(
#    name="test_yay_osx",
#    slavenames=['osx_slave'],
#    factory = factory,
#))


# Test yaybu on OSX
# ===============

factory = BuildFactory()
factory.addStep(Git(
    repourl = COMPONENTS['yaybu']['repository'],
    mode = 'incremental',
    codebase = 'yaybu',
))
factory.addStep(Git(
    repourl = COMPONENTS['yay']['repository'],
    mode = 'incremental',
    codebase = 'yay',
    workdir = 'build/src/yay',
))
factory.addStep(ShellCommand(
    name="travis-solo",
    command=['travis-solo', '--overwrite', '{"python": ["2.7"]}'],
))


#c['builders'].append(BuilderConfig(
#    name="test_yaybu_osx",
#    slavenames=['osx_slave'],
#    factory = factory,
#))


# Build and release Yaybu.app
# ===========================

factory = BuildFactory()
for comp in TARGETS['osx']['components']:
    factory.addStep(Git(
        repourl = COMPONENTS[comp]['repository'],
        mode = 'incremental',
        codebase = comp,
        workdir = COMPONENTS[comp]['workdir'],
    ))
factory.addStep(ShellCommand(
    name="build.sh",
    description = "setting up build environment",
    descriptionDone = "set up build environment",
    haltOnFailure = True,
    command = ['./build.sh'],
))
factory.addStep(ShellCommand(
    name="py2app",
    description = "building Yaybu.app",
    descriptionDone = "built Yaybu.app",
    haltOnFailure = True,
    command = ['python/bin/python', 'setup.py', 'py2app', '-b', Property('buildnumber'), '-c', Property('channel')],
))
factory.addStep(ShellCommand(
    name="upload",
    description = "uploading to nightlies",
    descriptionDone = "uploaded nightlies",
    haltOnFailure = True,
    command = ['python/bin/python', 'nightlies/upload_nightly.py', Property('buildnumber'), Property('channel')],
))
factory.addStep(ShellCommand(
    name="release-to-gh",
    description = "releasing to gh",
    descriptionDone = "released to gh",
    haltOnFailure = True,
    command = ['attach_to_release', 'yaybu/yaybu', Property('version'), 'Yaybu.dmg', 'Yaybu.dmg'],
    doStepIf=lambda step: step.build.getProperty("channel") == "stable",
))

c['builders'].append(BuilderConfig(
    name="build_osx",
    slavenames=['osx_slave'],
    category='osx',
    factory = factory,
))



# Build and release Yaybu.deb
# ===========================

for archive in settings["debs"]["archives"]:
    lock = MasterLock("%s-incoming" % archive['name'])

    factory = BuildFactory()
    factory.addStep(ShellCommand(
        name="process-incoming",
        description="processing incoming",
        descriptionDone="processed incoming",
        haltOnFailure=True,
        command=["reprepro", "-Vb", archive["root"], "processincoming", "incoming"],
    ))
    factory.addStep(ShellCommand(
        name="delete-unreferenced",
        description="deleting unreferenced",
        descriptionDone="deleted unreferenced",
        haltOnFailure=True,
        command=["reprepro", "-Vb", archive["root"], "deleteunreferenced"],
    ))
    for d in ("pool", "dists"):
        factory.addStep(ShellCommand(
            name="s3-sync-" + d,
            description = "applying additions/changes to %s" % d,
            descriptionDone = "applied additions/changes to %s" % d,
            haltOnFailure = True,
            command = [
                's3cmd', '-c', '/var/local/releasebot/debian/.s3cmd.cfg', 'sync',
                os.path.join(archive["root"], d),
                Interpolate('s3://yaybu.com/%(prop:channel)s/apt/' + '%s/%s' % (archive['name'], d)),
            ],
            doStepIf=lambda step: step.build.getProperty("channel") != "zero",
        ))
    for d in ("pool", "dists"):
        factory.addStep(ShellCommand(
            name="s3-sync-" + d + "-deletes",
            description = "applying deletions to %s" % d,
            descriptionDone = "applied deletions to %s" % d,
            haltOnFailure = True,
            command = [
                's3cmd', '-c', '/var/local/releasebot/debian/.s3cmd.cfg', 'sync', '--delete-removed',
                os.path.join(archive["root"], d),
                Interpolate('s3://yaybu.com/%(prop:channel)s/apt/' + '%s/%s' % (archive['name'], d)),
            ],
            doStepIf=lambda step: step.build.getProperty("channel") != "zero",
        ))


    c['builders'].append(BuilderConfig(
        name="%s" % archive["name"],
        locks=[lock.access('exclusive')],
        slavenames=['debian'],
        category=archive['name'].encode("utf-8"),
        factory=factory,
    ))
    c['schedulers'].append(Triggerable(
        name = "%s_upload" % archive['name'],
        builderNames = ["%s" % archive['name']],
    ))

    for series in archive['series']:
        for arch in series['archs']:
            pbuilder_dir = os.path.join(settings["debs"]["root"], "pbuilder", "-".join((archive['name'], series['name'], arch)))
            reprepro_dir = os.path.join(settings["debs"]["root"], "archives", archive['name'])

            factory = BuildFactory()
            for comp in TARGETS['debian']['components']:
                factory.addStep(Git(
                    repourl = COMPONENTS[comp]['repository'],
                    mode = 'incremental',
                    codebase = comp,
                    workdir = COMPONENTS[comp]['workdir'],
                ))

            factory.addStep(SetPropertyFromCommand(
                name="get-yaybu-version",
                command="python setup.py --version",
                property="version",
                workdir = COMPONENTS["yaybu"]["workdir"],
            ))
            factory.addStep(ShellCommand(
                name="debchange",
                description = "bumping debian/changelog",
                descriptionDone = "bumpied debian/changelog",
                haltOnFailure = True,
                command = ['debchange', '-b', '--distribution', series['name'], '-v', Interpolate('%(prop:version)s+%(prop:buildnumber)s' + '~%s1' % series['name']), 'Automated release'],
            ))
            factory.addStep(ShellCommand(
                name="pdebuild",
                description = "building packages",
                descriptionDone = "built packages",
                haltOnFailure = True,
                command = [
                    'sudo',
                    #'PIP_USE_WHEEL=true',
                    #'PIP_FIND_LINKS=%s' % os.path.join(pbuilder_dir, "wheels"),
                    '/usr/bin/pdebuild', '--use-pdebuild-internal',
                    '--configfile', os.path.join(pbuilder_dir, "config"),
                    '--debbuildopts', '-b',
                ],
            ))
            factory.addStep(ShellCommand(
                name="mv-to-incoming",
                description = "moving packages to incoming",
                descriptionDone = "moved packages to incoming",
                haltOnFailure = True,
                command = ["sh", "-c", "mv %s %s" % (os.path.join(pbuilder_dir, "result", "*"), os.path.join(reprepro_dir, "incoming"))],
                locks=[lock.access('exclusive')],
            ))
            factory.addStep(Trigger(
                schedulerNames=['%s_upload' % archive['name']],
                waitForFinish=False,
                copy_properties=['channel'],
            ))

            c['builders'].append(BuilderConfig(
                name="%s_%s_%s" % (archive['name'], series['name'], arch),
                slavenames=['debian'],
                category=archive['name'].encode("utf-8"),
                factory = factory,
            ))


# Build and release Yaybu.exe
# ===========================

factory = BuildFactory()
for comp in TARGETS['windows']['components']:
    factory.addStep(Git(
        repourl = COMPONENTS[comp]['repository'],
        mode = 'incremental',
        codebase = comp,
        workdir = COMPONENTS[comp]['workdir'],
    ))
factory.addStep(SetPropertyFromCommand(
    name="get-yaybu-version",
    command=['python', 'setup.py', '--version'],
    property="version",
    workdir = COMPONENTS["yaybu"]["workdir"],
))
factory.addStep(ShellCommand(
    name="make-wheels",
    description = "making wheels",
    descriptionDone = "made wheels",
    haltOnFailure = True,
    command = ['wine', 'python', '-m', 'pip', 'wheel', '-f', 'C:\\wheels', '-w', 'C:\\wheels', '-r', 'requirements/yaybu.exe.txt'],
    env = {"PIP_DOWNLOAD_CACHE": "C:\\sdists"},
))
factory.addStep(ShellCommand(
    name="clean-env",
    description = "removing old env",
    descriptionDone = "removed old env",
    haltOnFailure = True,
    command = ['rm', '-rf', 'env'],
))
factory.addStep(ShellCommand(
    name="virtualenv",
    description = "creating new env",
    descriptionDone = "created new env",
    haltOnFailure = True,
    command = ['wine', 'python', '-m', 'virtualenv', 'env'],
))
factory.addStep(ShellCommand(
    name="pip-install-requirements",
    description = "installing dependencies",
    descriptionDone = "installed dependencies",
    haltOnFailure = True,
    command = ['wine', './env/Scripts/python.exe', '-m', 'pip', 'install', '-r', 'requirements.txt'],
))
factory.addStep(ShellCommand(
    name="py2exe",
    description = "building Yaybu.exe",
    descriptionDone = "built Yaybu.exe",
    haltOnFailure = True,
    command = ['wine', './env/Scripts/python.exe', 'setup.py', 'py2exe'],
))
factory.addStep(ShellCommand(
    name="zip",
    description = "building Yaybu.exe.zip",
    descriptionDone = "built Yaybu.exe.zip",
    haltOnFailure = True,
    # FIXME: This is deprecated (command should be a list) but we only get globbing with this form
    # Bake it into setup.py?
    command = 'zip -FSr Yaybu.exe.zip dist/*',
))
factory.addStep(ShellCommand(
    name="test-binary",
    description = "testing Yaybu.exe",
    descriptionDone = "tested Yaybu.exe",
    haltOnFailure = True,
    command = ['./dist/YaybuShell.exe', 'selftest'],
))
factory.addStep(ShellCommand(
    name="release-to-s3",
    description = "uploading Yaybu.exe.zip",
    descriptionDone = "uploaded Yaybu.exe.zp",
    haltOnFailure = True,
    command = ['s3cmd', '-c', '/var/local/releasebot/wine/.s3cmd.cfg', 'put', 'Yaybu.exe.zip', Interpolate('s3://yaybu.com/%(prop:channel)s/exe/Yaybu.exe.zip')], # -%(prop:version)s+%(prop:buildnumber)s.zip')],
    doStepIf=lambda step: step.build.getProperty("channel") != "zero",
))
factory.addStep(ShellCommand(
    name="release-to-gh",
    description = "release Yaybu.exe.zip",
    descriptionDone = "released Yaybu.exe.zip",
    haltOnFailure = True,
    command = ['attach_to_release', 'yaybu/yaybu', Property('version'), 'Yaybu.exe.zip', 'Yaybu.exe.zip'],
    doStepIf=lambda step: step.build.getProperty("channel") == "stable",
))



c['builders'].append(BuilderConfig(
    name="build_wine",
    slavenames=['wine'],
    category="windows",
    factory = factory,
    env = {"WINEDEBUG": "-all"},
))


c['status'] = []

c['status'].append(html.WebStatus(
    http_port=8080,
    authz=authz.Authz(
        # auth=auth.BasicAuth([("yaybu","yaybu")]),
        gracefulShutdown = False,
        forceBuild = True,
        forceAllBuilds = True,
        pingBuilder = True,
        stopBuild = True,
        stopAllBuilds = True,
        cancelPendingBuild = True,
    ),
    order_console_by_time=True,
))

c['title'] = "Yaybu Release Automation"
c['titleURL'] = "https://github.com/yaybu/"
c['buildbotURL'] = "http://localhost:8080/"

c['db'] = {
    'db_url' : "sqlite:///state.sqlite",
}

