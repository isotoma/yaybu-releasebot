# -*- python -*-
# ex: set syntax=python:

import json
import os
import sys

from buildbot.locks import MasterLock
from buildbot.buildslave import BuildSlave
from buildbot.config import BuilderConfig
from buildbot.changes.gitpoller import GitPoller
from buildbot.schedulers.basic import AnyBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.forcesched import ChoiceStringParameter
from buildbot.changes import filter
from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand, SetPropertyFromCommand
from buildbot.status import html
from buildbot.status.web import authz, auth
from buildbot.process.properties import Interpolate, Property
from buildbot.schedulers.timed import Nightly
from buildbot.schedulers.filter import ChangeFilter
from buildbot.schedulers.triggerable import Triggerable
from buildbot.steps.trigger import Trigger


settings = json.load(open(os.path.join(sys.prefix, "etc", "settings.json")))


COMPONENTS = {
    'yay': {
        'repository': 'git://github.com/yaybu/yay',
        'branch': 'master',
        'workdir': 'build/src/yay',
        },
    'yaybu': {
        'repository': 'git://github.com/yaybu/yaybu',
        'branch': 'master',
        'workdir': 'build/src/yaybu',
        },
    'Yaybu.app': {
        'repository': 'git://github.com/yaybu/Yaybu.app',
        'branch': 'master',
        'workdir': 'build',
        },
    'Yaybu.exe': {
        'repository': 'git://github.com/yaybu/Yaybu.exe',
        'branch': 'master',
        'workdir': 'build',
        },
    'Yaybu.deb': {
        'repository': 'git://github.com/yaybu/Yaybu.deb',
        'branch': 'master',
        'workdir': 'build',
        },

    }

OSX_COMPONENTS = ['Yaybu.app', 'yay', 'yaybu']
DEB_COMPONENTS = ['Yaybu.deb', 'yay', 'yaybu']
WIN7_COMPONENTS = ['Yaybu.exe', 'yay', 'yaybu']

c = BuildmasterConfig = {}

c['slaves'] = [
    BuildSlave("osx_slave", "pass"),
    BuildSlave("debian", "pass"),
    BuildSlave("wine", "pass"),
    ]
c['slavePortnum'] = 9989


def codebaseGenerator(chdict):
    return chdict['project']
c['codebaseGenerator'] = codebaseGenerator


c['change_source'] = []
for project, vcs in COMPONENTS.items():
    c['change_source'].append(GitPoller(
        vcs['repository'],
        project=project,
        branch=vcs['branch'],
        pollinterval=300
        ))


c['schedulers'] = []
c['schedulers'].append(AnyBranchScheduler(
    name="on-commit-yay",
    codebases=COMPONENTS,
    treeStableTimer=None,
    change_filter=ChangeFilter(project="yay"),
    builderNames=["test_yay_osx", "test_yay_wine"],
    ))
c['schedulers'].append(AnyBranchScheduler(
    name="on-commit-yaybu",
    codebases=COMPONENTS,
    treeStableTimer=None,
    change_filter=ChangeFilter(project=["yay", "yaybu"]),
    builderNames=["test_yaybu_osx", "test_yaybu_wine"],
    ))
c['schedulers'].append(Nightly(
    name='nightly-osx',
    builderNames=['build_osx'],
    codebases=COMPONENTS,
    branch='master',
    change_filter=ChangeFilter(project=OSX_COMPONENTS),
    hour=3,
    minute=0,
    onlyIfChanged=True,
    properties = {
        "channel": "nightlies",
        },
    ))
c['schedulers'].append(Nightly(
    name='nightly-wine',
    builderNames=['build_wine'],
    codebases=COMPONENTS,
    branch='master',
    change_filter=ChangeFilter(project=WIN7_COMPONENTS),
    hour=3,
    minute=0,
    onlyIfChanged=True,
    properties = {
        "channel": "nightlies",
        },
    ))

builder_names = []
for a in settings['debs']['archives']:
    for s in a['series']:
        for p in s['archs']:
            builder_names.append(str("%s_%s_%s" % (a['name'], s['name'], p)))

c['schedulers'].append(Nightly(
    name='nightly-deb',
    builderNames=builder_names,
    codebases=COMPONENTS,
    branch='master',
    change_filter=ChangeFilter(project=DEB_COMPONENTS),
    hour=3,
    minute=0,
    onlyIfChanged=True,
    properties = {
        "channel": "nightlies",
        },
    ))
c['schedulers'].append(ForceScheduler(
    name="force-release",
    codebases=COMPONENTS,
    builderNames=["build_osx", "build_wine"] + builder_names,
    properties = [
        ChoiceStringParameter(name="channel", choices=["nightlies", "stable"], default="main"),
        ],
    ))
c['schedulers'].append(ForceScheduler(
    name="force",
    codebases=COMPONENTS,
    builderNames=["test_yay_osx", "test_yaybu_osx", "test_yay_wine", "test_yaybu_wine"],
    ))


c['builders'] = []

# Test yay on OSX
# ===============

factory = BuildFactory()
factory.addStep(Git(
    repourl = COMPONENTS['yay']['repository'],
    mode = 'incremental',
    codebase = 'yay',
    ))
factory.addStep(ShellCommand(
    command=['travis-solo', '--overwrite', '{"python": ["2.7"]}'],
    ))


c['builders'].append(
    BuilderConfig(
        name="test_yay_osx",
        slavenames=['osx_slave'],
        factory = factory,
        )
    )


# Test yaybu on OSX
# ===============

factory = BuildFactory()
factory.addStep(Git(
    repourl = COMPONENTS['yaybu']['repository'],
    mode = 'incremental',
    codebase = 'yaybu',
    ))
factory.addStep(Git(
    repourl = COMPONENTS['yay']['repository'],
    mode = 'incremental',
    codebase = 'yay',
    workdir = 'build/src/yay',
    ))
factory.addStep(ShellCommand(
    command=['travis-solo', '--overwrite', '{"python": ["2.7"]}'],
    ))


c['builders'].append(
    BuilderConfig(
        name="test_yaybu_osx",
        slavenames=['osx_slave'],
        factory = factory,
        )
    )


# Test yay on win 7
# =================

factory = BuildFactory()
factory.addStep(Git(
    repourl = COMPONENTS['yay']['repository'],
    mode = 'incremental',
    codebase = 'yay',
    ))
factory.addStep(ShellCommand(
    description = "making wheels",
    descriptionDone = "made wheels",
    haltOnFailure = True,
    command = ['wine', 'python', '-m', 'pip', 'wheel', '--wheel-dir', 'C:\\wheels', '-r', 'requirements.txt'],
    ))
factory.addStep(ShellCommand(
    description = "removing old env",
    descriptionDone = "removed old env",
    haltOnFailure = True,
    command = ['wine', 'rm', '-rf', 'env'],
    ))
factory.addStep(ShellCommand(
    description = "creating new env",
    descriptionDone = "created new env",
    haltOnFailure = True,
    command = ['wine', 'python', '-m', 'virtualenv', 'env'],
    ))
factory.addStep(ShellCommand(
    description = "installing dependencies",
    descriptionDone = "installed dependencies",
    haltOnFailure = True,
    command = ['wine', './env/Scripts/python.exe', '-m', 'pip', 'install', '-r', 'requirements.txt'],
    ))
factory.addStep(ShellCommand(
    description = "installing yaybu",
    descriptionDone = "installed yaybu",
    haltOnFailure = True,
    command = ['wine', './env/Scripts/python.exe', '-m', 'pip', 'install', '-e', '.'],
    ))
factory.addStep(ShellCommand(
    description = "running tests",
    descriptionDone = "ran tests",
    haltOnFailure = True,
    command = ['wine', './env/Scripts/python.exe', '-m', 'nose2', 'yay'],
    ))

c['builders'].append(
    BuilderConfig(
        name="test_yay_wine",
        slavenames=['wine'],
        factory = factory,
        )
    )


# Test yaybu on wine
# ==================

factory = BuildFactory()
factory.addStep(Git(
    repourl = COMPONENTS['yaybu']['repository'],
    mode = 'incremental',
    codebase = 'yaybu',
    ))
factory.addStep(Git(
    repourl = COMPONENTS['yay']['repository'],
    mode = 'incremental',
    codebase = 'yay',
    workdir="build/src/yay",
    ))

factory.addStep(ShellCommand(
    description = "making wheels",
    descriptionDone = "made wheels",
    haltOnFailure = True,
    command = ['wine', 'python', '-m', 'pip', 'wheel', '--wheel-dir', 'C:\\wheels', '-r', 'requirements.txt'],
    ))
factory.addStep(ShellCommand(
    description = "removing old env",
    descriptionDone = "removed old env",
    haltOnFailure = True,
    command = ['wine', 'rm', '-rf', 'env'],
    ))
factory.addStep(ShellCommand(
    description = "creating new env",
    descriptionDone = "created new env",
    haltOnFailure = True,
    command = ['wine', 'python', '-m', 'virtualenv', 'env'],
    ))
factory.addStep(ShellCommand(
    description = "installing dependencies",
    descriptionDone = "installed dependencies",
    haltOnFailure = True,
    command = ['wine', './env/Scripts/python.exe', '-m', 'pip', 'install', '-r', 'requirements.txt'],
    ))
factory.addStep(ShellCommand(
    description = "installing yay",
    descriptionDone = "installed yay",
    haltOnFailure = True,
    command = ['wine', './env/Scripts/python.exe', '-m', 'pip', 'install', '-e', 'src/yay'],
    ))
factory.addStep(ShellCommand(
    description = "installing yaybu",
    descriptionDone = "installed yaybu",
    haltOnFailure = True,
    command = ['wine', './env/Scripts/python.exe', '-m', 'pip', 'install', '-e', '.'],
    ))
factory.addStep(ShellCommand(
    description = "running tests",
    descriptionDone = "ran tests",
    haltOnFailure = True,
    command = ['wine', './env/Scripts/python.exe', '-m', 'nose2', 'yaybu'],
    ))

c['builders'].append(
    BuilderConfig(
        name="test_yaybu_wine",
        slavenames=['wine'],
        factory = factory,
        )
    )


# Build and release Yaybu.app
# ===========================

factory = BuildFactory()
for comp in OSX_COMPONENTS:
    factory.addStep(Git(
        repourl = COMPONENTS[comp]['repository'],
        mode = 'incremental',
        codebase = comp,
        workdir = COMPONENTS[comp]['workdir'],
        ))
factory.addStep(ShellCommand(
    description = "setting up build environment",
    descriptionDone = "set up build environment",
    haltOnFailure = True,
    command = ['./build.sh'],
    ))
factory.addStep(ShellCommand(
    description = "building Yaybu.app",
    descriptionDone = "built Yaybu.app",
    haltOnFailure = True,
    command = ['python/bin/python', 'setup.py', 'py2app', '-b', Property('buildnumber'), '-c', Property('channel')],
    ))
factory.addStep(ShellCommand(
    description = "uploading to nightlies",
    descriptionDone = "uploaded nightlies",
    haltOnFailure = True,
    command = ['python/bin/python', 'nightlies/upload_nightly.py', Property('buildnumber'), Property('channel')],
    ))

c['builders'].append(
    BuilderConfig(
        name="build_osx",
        slavenames=['osx_slave'],
        factory = factory,
        )
    )



# Build and release Yaybu.deb
# ===========================

for archive in settings["debs"]["archives"]:
    lock = MasterLock("%s-incoming" % archive['name'])

    factory = BuildFactory()
    factory.addStep(ShellCommand(
        name="process-incoming",
        description="processing incoming",
        descriptionDone="processed incoming",
        haltOnFailure=True,
        command=["reprepro", "-Vb", archive["root"], "processincoming", "incoming"],
    ))
    factory.addStep(ShellCommand(
        name="delete-unreferenced",
        description="deleting unreferenced",
        descriptionDone="deleted unreferenced",
        haltOnFailure=True,
        command=["reprepro", "-Vb", archive["root"], "deleteunreferenced"],
    ))
    for d in ("pool", "dists"):
        factory.addStep(ShellCommand(
            description = "applying additions/changes to %s" % d,
            descriptionDone = "applied additions/changes to %s" % d",
            haltOnFailure = True,
            command = [
                's3cmd', 'sync',
                os.path.join(archive["root"], d),
                Interpolate('s3://yaybu.com/%(prop:channel)s/apt/' + '%s/%s' % (archive['name'], d)),
            ],
        ))
    for d in ("pool", "dists"):
        factory.addStep(ShellCommand(
            description = "applying deletions to %s" % d,
            descriptionDone = "applied deletions to %s" % d",
            haltOnFailure = True,
            command = [
                's3cmd', 'sync', '--delete-removed',
                os.path.join(archive["root"], d),
                Interpolate('s3://yaybu.com/%(prop:channel)s/apt/' + '%s/%s' % (archive['name'], d)),
            ],
        ))


    c['builders'].append(BuilderConfig(
        name="%s" % archive["name"],
        locks=[lock.access('exclusive')],
        slavenames=['debian'],
        factory=factory,
    ))
    c['schedulers'].append(Triggerable(
        name = "%s_upload" % archive['name'],
        builderNames = ["%s" % archive['name']],
    ))

    for series in archive['series']:
        for arch in series['archs']:
            pbuilder_dir = os.path.join(settings["debs"]["root"], "pbuilder", "-".join((archive['name'], series['name'], arch)))
            reprepro_dir = os.path.join(settings["debs"]["root"], "archives", archive['name'])

            factory = BuildFactory()
            for comp in DEB_COMPONENTS:
                factory.addStep(Git(
                    repourl = COMPONENTS[comp]['repository'],
                    mode = 'incremental',
                    codebase = comp,
                    workdir = COMPONENTS[comp]['workdir'],
                ))

            factory.addStep(SetPropertyFromCommand(
                command="python setup.py --version",
                property="version",
                workdir = COMPONENTS["yaybu"]["workdir"],
            ))
            factory.addStep(ShellCommand(
                description = "bumping debian/changelog",
                descriptionDone = "bumpied debian/changelog",
                haltOnFailure = True,
                command = ['debchange', '-b', '--distribution', series['name'], '-v', Interpolate('%(prop:version)s+%(prop:buildnumber)s' + '~%s1' % series['name']), 'Automated release'],
            ))
            factory.addStep(ShellCommand(
                description = "building packages",
                descriptionDone = "built packages",
                haltOnFailure = True,
                command = [
                    'sudo', '/usr/bin/pdebuild',
                    '--architecture', arch, 
                    '--use-pdebuild-internal',
                    '--configfile', os.path.join(pbuilder_dir, "config"),
                    '--debbuildopts', '-b',
                ],
            ))
            factory.addStep(ShellCommand(
                description = "moving packages to incoming",
                descriptionDone = "moved packages to incoming",
                haltOnFailure = True,
                command = ["sh", "-c", "mv %s %s" % (os.path.join(pbuilder_dir, "result", "*"), os.path.join(reprepro_dir, "incoming"))],
                locks=[lock.access('exclusive')],
            ))
            factory.addStep(Trigger(
                schedulerNames=['%s_upload' % archive['name']],
                waitForFinish=False,
            ))

            c['builders'].append(BuilderConfig(
                name="%s_%s_%s" % (archive['name'], series['name'], arch),
                slavenames=['debian'],
                factory = factory,
            ))


# Build and release Yaybu.exe
# ===========================

factory = BuildFactory()
for comp in WIN7_COMPONENTS:
    factory.addStep(Git(
        repourl = COMPONENTS[comp]['repository'],
        mode = 'incremental',
        codebase = comp,
        workdir = COMPONENTS[comp]['workdir'],
        ))
factory.addStep(ShellCommand(
    description = "making wheels",
    descriptionDone = "made wheels",
    haltOnFailure = True,
    command = ['wine', 'python', '-m', 'pip', 'wheel', '--wheel-dir', 'C:\\wheels', '-r', 'requirements.txt'],
    ))
factory.addStep(ShellCommand(
    description = "removing old env",
    descriptionDone = "removed old env",
    haltOnFailure = True,
    command = ['wine', 'rm', '-rf', 'env'],
    ))
factory.addStep(ShellCommand(
    description = "creating new env",
    descriptionDone = "created new env",
    haltOnFailure = True,
    command = ['wine', 'python', '-m', 'virtualenv', 'env'],
    ))
factory.addStep(ShellCommand(
    description = "installing dependencies",
    descriptionDone = "installed dependencies",
    haltOnFailure = True,
    command = ['wine', './env/Scripts/python.exe', '-m', 'pip', 'install', '-r', 'requirements.txt'],
    ))
factory.addStep(ShellCommand(
    description = "setting up yay",
    descriptionDone = "set up yay",
    haltOnFailure = True,
    command = ['wine', '../../env/Scripts/python.exe', '-m', 'pip', 'install', '--no-deps', '--upgrade', '.'],
    workdir = COMPONENTS['yay']['workdir'],
    ))
factory.addStep(ShellCommand(
    description = "setting up yaybu",
    descriptionDone = "set up yaybu",
    haltOnFailure = True,
    command = ['wine', '../../env/Scripts/python.exe', '-m', 'pip', 'install', '--no-deps', '--upgrade', '.'],
    workdir = COMPONENTS['yaybu']['workdir'],
    ))
factory.addStep(SetPropertyFromCommand(
    command=['python', 'setup.py', '--version'],
    property="version",
    workdir = COMPONENTS["yaybu"]["workdir"],
    ))
factory.addStep(ShellCommand(
    description = "building Yaybu.exe",
    descriptionDone = "built Yaybu.exe",
    haltOnFailure = True,
    command = ['wine', './env/Scripts/python.exe', 'setup.py', 'py2exe'],
    ))
factory.addStep(ShellCommand(
    description = "building Yaybu.exe.zip",
    descriptionDone = "built Yaybu.exe.zip",
    haltOnFailure = True,
    # FIXME: This is deprecated (command should be a list) but we only get globbing with this form
    # Bake it into setup.py?
    command = 'zip -FSr Yaybu.exe.zip dist/*',
    ))
factory.addStep(ShellCommand(
    description = "uploading Yaybu.exe.zip",
    descriptionDone = "uploaded Yaybu.exe.zp",
    haltOnFailure = True,
    command = ['s3cmd', 'put', 'Yaybu.exe.zip', Interpolate('s3://yaybu.com/%(prop:channel)s/exe/Yaybu.exe.zip')], # -%(prop:version)s+%(prop:buildnumber)s.zip')],
    ))




c['builders'].append(
    BuilderConfig(
        name="build_wine",
        slavenames=['wine'],
        factory = factory,
        )
    )


c['status'] = []

c['status'].append(html.WebStatus(
    http_port=8080,
    authz=authz.Authz(
        # auth=auth.BasicAuth([("yaybu","yaybu")]),
        gracefulShutdown = False,
        forceBuild = True,
        forceAllBuilds = True,
        pingBuilder = True,
        stopBuild = True,
        stopAllBuilds = True,
        cancelPendingBuild = True,
        ),
    ))

c['title'] = "Yaybu Release Automation"
c['titleURL'] = "https://github.com/yaybu/osx"
c['buildbotURL'] = "http://localhost:8080/"

c['db'] = {
    'db_url' : "sqlite:///state.sqlite",
}

